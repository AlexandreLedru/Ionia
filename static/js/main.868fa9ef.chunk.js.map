{"version":3,"sources":["bundles/assets/images/Ionia.png","bundles/common/components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","src","Ionia","OverlayTrigger","placement","overlay","Tooltip","id","xmlns","aria-hidden","focusable","data-prefix","data-icon","role","viewBox","fill","d","opacity","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,mC,6QCOtBC,E,iLAEb,OACI,yBAAKC,UAAU,WACX,wBAAIA,UAAU,eACV,wBAAIA,UAAU,QACV,uBAAGC,KAAK,IAAID,UAAU,gBACtB,yBAAKE,IAAKC,IAAOH,UAAU,iBAG/B,kBAACI,EAAA,EAAD,CAAgBC,UAAU,QAAQC,QAAS,kBAACC,EAAA,EAAD,CAASC,GAAG,iBAAZ,qBACvC,wBAAIR,UAAU,gBACV,uBAAGC,KAAK,IAAID,UAAU,gBACtB,yBAAKS,MAAM,6BAA6BC,cAAY,OAAOC,UAAU,QAAQC,cAAY,MAAMC,YAAU,OAAOb,UAAU,iCAAiCc,KAAK,MAAMC,QAAQ,eAAc,uBAAGf,UAAU,YAAW,0BAAMA,UAAU,eAAegB,KAAK,eAAeC,EAAE,sDAAsDC,QAAQ,QAAO,0BAAMlB,UAAU,aAAagB,KAAK,eAAeC,EAAE,uKAIzY,kBAACb,EAAA,EAAD,CAAgBC,UAAU,QAAQC,QAAS,kBAACC,EAAA,EAAD,CAASC,GAAG,iBAAZ,WACvC,wBAAIR,UAAU,gBACV,uBAAGC,KAAK,IAAID,UAAU,gBACtB,yBAAKS,MAAM,6BAA6BC,cAAY,OAAOC,UAAU,QAAQC,cAAY,MAAMC,YAAU,QAAQb,UAAU,kCAAkCc,KAAK,MAAMC,QAAQ,eAAc,uBAAGf,UAAU,YAAW,0BAAMA,UAAU,eAAegB,KAAK,eAAeC,EAAE,sZAAsZC,QAAQ,QAAO,0BAAMlB,UAAU,aAAagB,KAAK,eAAeC,EAAE,sa,GApB3tBE,IAAMC,WCO3BC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKrB,UAAU,gBCIDsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.868fa9ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ionia.9cfa4e4f.png\";","import React from 'react';\r\nimport Ionia from '../../../assets/images/Ionia.png';\r\nimport './Header.scss'\r\nimport Overlay from 'react-bootstrap/Overlay';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\n\r\nexport default class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"sidebar\">\r\n                <ul className=\"sidebar-nav\">\r\n                    <li className=\"logo\">\r\n                        <a href=\"#\" className=\"sidebar-link\">\r\n                        <img src={Ionia} className=\"ionia-logo\"></img>\r\n                        </a>\r\n                    </li>\r\n                    <OverlayTrigger placement='right' overlay={<Tooltip id=\"tooltip-right\">Summoner profile</Tooltip>}>\r\n                        <li className=\"sidebar-item\">\r\n                            <a href=\"#\" className=\"sidebar-link\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fad\" data-icon=\"user\" className=\"svg-inline--fa fa-user fa-w-14\" role=\"img\" viewBox=\"0 0 448 512\"><g className=\"fa-group\"><path className=\"fa-secondary\" fill=\"currentColor\" d=\"M352 128A128 128 0 1 1 224 0a128 128 0 0 1 128 128z\" opacity=\"0.4\"/><path className=\"fa-primary\" fill=\"currentColor\" d=\"M313.6 288h-16.7a174.1 174.1 0 0 1-145.8 0h-16.7A134.43 134.43 0 0 0 0 422.4V464a48 48 0 0 0 48 48h352a48 48 0 0 0 48-48v-41.6A134.43 134.43 0 0 0 313.6 288z\"/></g></svg>\r\n                            </a>\r\n                        </li>\r\n                    </OverlayTrigger>\r\n                    <OverlayTrigger placement='right' overlay={<Tooltip id=\"tooltip-right\">Builds</Tooltip>}>\r\n                        <li className=\"sidebar-item\">\r\n                            <a href=\"#\" className=\"sidebar-link\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fad\" data-icon=\"books\" className=\"svg-inline--fa fa-books fa-w-18\" role=\"img\" viewBox=\"0 0 576 512\"><g className=\"fa-group\"><path className=\"fa-secondary\" fill=\"currentColor\" d=\"M96 0H32A32 32 0 0 0 0 32v64h128V32A32 32 0 0 0 96 0zM0 384h128V128H0zm0 96a32 32 0 0 0 32 32h64a32 32 0 0 0 32-32v-64H0zm513.62-17.78L401.08 42.71l-60.26 16.14 112.35 418.8c.11.39.2.79.29 1.18l60.29-16.15c-.04-.15-.09-.3-.13-.46zM160 480a32 32 0 0 0 32 32h64a32 32 0 0 0 32-32v-64H160zM256 0h-64a32 32 0 0 0-32 32v64h124.79l-8-29.65a23.94 23.94 0 0 1 11.17-27V32A32 32 0 0 0 256 0zm-96 384h128V128H160z\" opacity=\"0.4\"/><path className=\"fa-primary\" fill=\"currentColor\" d=\"M0 416h128v-32H0zm0-288h128V96H0zm575.17 317.65L460.39 17.78a23.89 23.89 0 0 0-29.18-17h-.09L415.73 5a24 24 0 0 0-16.9 29.36l114.79 427.86a23.89 23.89 0 0 0 29.18 17h.09l15.38-4.22a24 24 0 0 0 16.9-29.35zM160 416h128v-32H160zM338.39 49.78a23.89 23.89 0 0 0-29.18-17h-.09L293.73 37a24 24 0 0 0-16.9 29.36l8 29.65H160v32h128V108l103.62 386.22a23.89 23.89 0 0 0 29.18 17h.09l15.38-4.22a24 24 0 0 0 16.9-29.33z\"/></g></svg>\r\n                            </a>\r\n                        </li>\r\n                    </OverlayTrigger>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { Header } from './bundles/common/components/Header'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}